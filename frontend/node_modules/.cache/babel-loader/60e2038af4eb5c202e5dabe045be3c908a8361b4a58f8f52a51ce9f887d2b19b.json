{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Drood\\\\Desktop\\\\mmenu\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored token on app load\n    const storedToken = localStorage.getItem('menuiq_token');\n    if (storedToken) {\n      setToken(storedToken);\n      fetchUserProfile(storedToken);\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchUserProfile = async authToken => {\n    try {\n      const response = await fetch('http://localhost:3001/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        // Token is invalid, clear it\n        localStorage.removeItem('menuiq_token');\n        setToken(null);\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      localStorage.removeItem('menuiq_token');\n      setToken(null);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:3001/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('menuiq_token', data.token);\n        return {\n          success: true,\n          message: 'Login successful!'\n        };\n      } else {\n        return {\n          success: false,\n          message: data.error || 'Login failed'\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: 'Network error. Please try again.'\n      };\n    }\n  };\n  const register = async (email, password, name) => {\n    try {\n      const response = await fetch('http://localhost:3001/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          name\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('menuiq_token', data.token);\n        return {\n          success: true,\n          message: 'Registration successful!'\n        };\n      } else {\n        return {\n          success: false,\n          message: data.error || 'Registration failed'\n        };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        message: 'Network error. Please try again.'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('menuiq_token');\n  };\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    loading,\n    isAuthenticated: !!user && !!token,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"uAkFQMmIUxfxJcQTEb8tCM/KFt4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","loading","setLoading","storedToken","localStorage","getItem","fetchUserProfile","authToken","response","fetch","headers","ok","data","json","removeItem","error","console","login","email","password","method","body","JSON","stringify","setItem","success","message","register","name","logout","value","isAuthenticated","isAdmin","role","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Drood/Desktop/mmenu/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n  role: 'user' | 'admin';\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  login: (email: string, password: string) => Promise<{ success: boolean; message: string }>;\r\n  register: (email: string, password: string, name: string) => Promise<{ success: boolean; message: string }>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n  isAuthenticated: boolean;\r\n  isAdmin: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored token on app load\r\n    const storedToken = localStorage.getItem('menuiq_token');\r\n    if (storedToken) {\r\n      setToken(storedToken);\r\n      fetchUserProfile(storedToken);\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchUserProfile = async (authToken: string) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/auth/me', {\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUser(data.user);\r\n      } else {\r\n        // Token is invalid, clear it\r\n        localStorage.removeItem('menuiq_token');\r\n        setToken(null);\r\n        setUser(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      localStorage.removeItem('menuiq_token');\r\n      setToken(null);\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string): Promise<{ success: boolean; message: string }> => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setUser(data.user);\r\n        setToken(data.token);\r\n        localStorage.setItem('menuiq_token', data.token);\r\n        return { success: true, message: 'Login successful!' };\r\n      } else {\r\n        return { success: false, message: data.error || 'Login failed' };\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { success: false, message: 'Network error. Please try again.' };\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, password: string, name: string): Promise<{ success: boolean; message: string }> => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password, name }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setUser(data.user);\r\n        setToken(data.token);\r\n        localStorage.setItem('menuiq_token', data.token);\r\n        return { success: true, message: 'Registration successful!' };\r\n      } else {\r\n        return { success: false, message: data.error || 'Registration failed' };\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { success: false, message: 'Network error. Please try again.' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('menuiq_token');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading,\r\n    isAuthenticated: !!user && !!token,\r\n    isAdmin: user?.role === 'admin',\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}